# typings/js.pyi (excerpts)

from typing import Any, Callable, Optional, Sequence, Union


class JSFunction:
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def bind(self, this: Any, *args: Any) -> 'JSFunction': ...
    def apply(self, this: Any, args: Sequence[Any]) -> Any: ...
    @property
    def name(self) -> str: ...


Function = JSFunction


class JSObject:
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __getitem__(self, key: Union[int, str]) -> Any: ...
    def __setitem__(self, key: Union[int, str], value: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...




class Console(JSObject):
    def log(self, *args: Any) -> None: ...
    def error(self, *args: Any) -> None: ...
    def warn(self, *args: Any) -> None: ...
    def info(self, *args: Any) -> None: ...
    def debug(self, *args: Any) -> None: ...


class PointerEvent:
    AT_TARGET: int
    BUBBLING_PHASE: int
    CAPTURING_PHASE: int
    NONE: int
    
    altKey: bool
    altitudeAngle: float
    azimuthAngle: float
    bubbles: bool
    button: int
    buttons: int
    cancelBubble: bool
    cancelable: bool
    clientX: int
    clientY: int
    composed: bool
    composedPath: Callable[[], list[Any]]
    ctrlKey: bool
    currentTarget: Any
    defaultPrevented: bool
    detail: int
    eventPhase: int
    fromElement: Any
    isPrimary: bool
    isTrusted: bool
    js_id: Any
    layerX: int
    layerY: int
    metaKey: bool
    movementX: int
    movementY: int
    offsetX: int
    offsetY: int
    pageX: int
    pageY: int
    persistentDeviceId: int
    pointerId: int
    pointerType: str
    pressure: float
    relatedTarget: Any
    returnValue: Any
    screenX: int
    screenY: int
    shiftKey: bool
    sourceCapabilities: Any
    srcElement: Any
    tangentialPressure: float
    target: Any
    tiltX: float
    tiltY: float
    timeStamp: float
    toElement: Any
    twist: float
    type: str
    view: Any
    which: int
    width: int
    x: int
    y: int

    # Métodos especiais
    def __bool__(self) -> bool: ...
    def __class__(self) -> Any: ...
    def __defineGetter__(self, name: str, func: Callable) -> None: ...
    def __defineSetter__(self, name: str, func: Callable) -> None: ...
    def __delattr__(self, name: str) -> None: ...
    def __dir__(self) -> list[str]: ...
    def __eq__(self, other: Any) -> bool: ...
    def __format__(self, format_spec: str) -> str: ...
    def __ge__(self, other: Any) -> bool: ...
    def __getattribute__(self, name: str) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __gt__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __init_subclass__(self, *args: Any, **kwargs: Any) -> None: ...
    def __le__(self, other: Any) -> bool: ...
    def __lookupGetter__(self, name: str) -> Callable: ...
    def __lookupSetter__(self, name: str) -> Callable: ...
    def __lt__(self, other: Any) -> bool: ...
    def __module__(self) -> str: ...
    def __ne__(self, other: Any) -> bool: ...
    def __new__(cls, *args: Any, **kwargs: Any) -> 'PointerEvent': ...
    def __proto__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __reduce_ex__(self, protocol: int) -> Any: ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __sizeof__(self) -> int: ...
    def __str__(self) -> str: ...
    def __subclasshook__(self, cls: Any) -> bool: ...
    def _js_type_flags(self) -> int: ...

    def as_object_map(self) -> dict[str, Any]: ...
    def getCoalescedEvents(self) -> list['PointerEvent']: ...
    def getModifierState(self, keyArg: str) -> bool: ...
    def getPredictedEvents(self) -> list['PointerEvent']: ...
    def initEvent(self, typeArg: str, canBubbleArg: bool, cancelableArg: bool) -> None: ...
    def initMouseEvent(self, typeArg: str, canBubbleArg: bool, cancelableArg: bool, viewArg: Any,
                       detailArg: int, screenXArg: int, screenYArg: int, clientXArg: int, clientYArg: int,
                       ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool,
                       buttonArg: int, relatedTargetArg: Any) -> None: ...
    def initUIEvent(self, typeArg: str, canBubbleArg: bool, cancelableArg: bool, viewArg: Any,
                    detailArg: int) -> None: ...
    def preventDefault(self) -> None: ...
    def stopImmediatePropagation(self) -> None: ...
    def stopPropagation(self) -> None: ...
    def toLocaleString(self) -> str: ...
    def to_py(self) -> Any: ...
    def typeof(self) -> str: ...
    def valueOf(self) -> Any: ...


class Document(JSObject):
    def getElementById(self, id: str) -> Optional[HTMLElement]: ...
    def createElement(self, tagName: str) -> HTMLElement: ...
    def querySelector(self, selectors: str) -> Optional[HTMLElement]: ...
    def querySelectorAll(self, selectors: str) -> Sequence[HTMLElement]: ...


class Navigator(JSObject):
    userAgent: str


class Location(JSObject):
    href: str
    pathname: str
    reload: JSFunction


class History(JSObject):
    def back(self) -> None: ...
    def forward(self) -> None: ...
    def go(self, delta: int) -> None: ...


class Storage(JSObject):
    def getItem(self, key: str) -> Optional[str]: ...
    def setItem(self, key: str, value: str) -> None: ...
    def removeItem(self, key: str) -> None: ...
    def clear(self) -> None: ...


class Event(JSObject):
    type: str
    target: JSObject
    currentTarget: JSObject
    def preventDefault(self) -> None: ...
    def stopPropagation(self) -> None: ...


class EventTarget(JSObject):
    def addEventListener(self, event: str, handler: JSFunction, options: Any = ...) -> None: ...
    def removeEventListener(self, event: str, handler: JSFunction, options: Any = ...) -> None: ...
    def dispatchEvent(self, event: Event) -> bool: ...


class HTMLElement(EventTarget, JSObject):
    id: str
    className: str
    style: JSObject
    def connectedCallback(self) -> None: ...
    def click(self) -> None: ...
    def focus(self) -> None: ...
    def blur(self) -> None: ...
    # e vários outros métodos e propriedades


class Promise(JSObject):
    def then(self, on_fulfilled: JSFunction, on_rejected: JSFunction = ...) -> "Promise": ...
    def catch(self, on_rejected: JSFunction) -> "Promise": ...
    def finally_(self, on_finally: JSFunction) -> "Promise": ...


def fetch(input: Union[str, JSObject], init: Optional[JSObject] = ...) -> Promise: ...


class TimerHandle(JSObject):
    # Pode ser o id retornado por setTimeout/setInterval, normalmente um int
    pass


class Element(HTMLElement):
    def appendChild(self, child: JSObject) -> JSObject: ...
    def removeChild(self, child: JSObject) -> JSObject: ...
    def insertBefore(self, newChild: JSObject, refChild: Optional[JSObject] = ...) -> JSObject: ...
    def replaceChild(self, newChild: JSObject, oldChild: JSObject) -> JSObject: ...
    def getAttribute(self, name: str) -> Optional[str]: ...
    def setAttribute(self, name: str, value: str) -> None: ...
    def removeAttribute(self, name: str) -> None: ...



# Funções de temporizador típicas do JS

def setTimeout(handler: Union[JSFunction, Callable[..., Any]], timeout: int = 0, *args: Any) -> TimerHandle: ...
def clearTimeout(handle: TimerHandle) -> None: ...

def setInterval(handler: Union[JSFunction, Callable[..., Any]], timeout: int = 0, *args: Any) -> TimerHandle: ...
def clearInterval(handle: TimerHandle) -> None: ...


class CustomElementRegistry:
    def define(self, name: str, constructor: Any) -> None: ...


class Object(JSObject):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __delattr__(self, name: str) -> None: ...
    def __getitem__(self, key: Union[int, str]) -> Any: ...
    def __setitem__(self, key: Union[int, str], value: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...


class Window(EventTarget, JSObject):
    document: Document
    navigator: Navigator
    location: Location
    history: History
    console: Console
    localStorage: Storage
    cacheStorage: Storage

    def alert(self, message: str) -> None: ...
    def confirm(self, message: str) -> bool: ...
    def prompt(self, message: str, default_value: Optional[str] = None) -> Optional[str]: ...
    def open(self, url: str, target: str = "_blank", features: str = "") -> Optional[JSObject]: ...
    def close(self) -> None: ...


document = Document()
console = Console()
navigator = Navigator()
localStorage = Storage()
cacheStorage = Storage()
location = Location()
window = Window()
customElements = CustomElementRegistry()